// This Arduino sketch reads DS18B20 "1-Wire" digital
// temperature sensors.
// Tutorial:
// http://www.hacktronics.com/Tutorials/arduino-1-wire-tutorial.html

#include <OneWire.h>
#include <DallasTemperature.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>

// Analog pin 4 to SDA with 10k pullup resistor to 5v
// Analog pin 5 to SCL with 10k pullup resistor to 5v
LiquidCrystal_I2C lcd(0x27,20,4); //set the LCD address to 0x27 for a 16 chars and 2 line display

// Data wire is plugged into Digital pin 3 on the Arduino
#define ONE_WIRE_BUS 7

// Setup a oneWire instance to communicate with any OneWire devices
OneWire oneWire(ONE_WIRE_BUS);

// Pass our oneWire reference to Dallas Temperature. 
DallasTemperature sensors(&oneWire);

// Assign the addresses of your 1-Wire temp sensors.
// See the tutorial on how to obtain these addresses:
// http://www.hacktronics.com/Tutorials/arduino-1-wire-address-finder.html

#define sensor_location1 3
#define sensor_location2 3
#define sensor_count sensor_location1 + sensor_location2
DeviceAddress* Thermometer[sensor_count];
DeviceAddress Thermometer0 = {0x28, 0xB8, 0x0B, 0x7B, 0x04, 0x00, 0x00, 0x6A };
DeviceAddress Thermometer1 = { 0x28, 0xED, 0x9C, 0x7A, 0x04, 0x00, 0x00, 0xC6 };
DeviceAddress Thermometer2 = { 0x28, 0x59, 0xBE, 0xDF, 0x02, 0x00, 0x00, 0x9F };
DeviceAddress Thermometer3 = { 0x28, 0x7A, 0x4A, 0x67, 0x05, 0x00, 0x00, 0x3E};
DeviceAddress Thermometer4 = { 0x28, 0xFF, 0xFF, 0x68, 0x05, 0x00, 0x00, 0x11};
DeviceAddress Thermometer5 = { 0x28, 0x79, 0xFE, 0x53, 0x05, 0x00, 0x00, 0x71};

// device location and function
char* sensor_name[] = {"Basement_xchg_cold ", "Basement_slab_cold ", 
                      "Basement_xchg_hot  ", "TarmRoom_prmx_cold ",
                      "TarmRoom_psmx_warm ", "TarmRoom_all__hot  "};
String s1; // just used to print to LCD

/*-----( Declare Constants )-----*/
#define RELAY_ON 0
#define RELAY_OFF 1
/*-----( Declare objects )-----*/
/*-----( Declare Variables )-----*/
#define Relay_1  2  // Arduino Digital I/O pin number
#define Relay_2  3
#define Relay_3  4
#define Relay_4  5

void setup(void)
{
  Thermometer[0]= &Thermometer0 ;
  Thermometer[1]= &Thermometer1 ;
  Thermometer[2]= &Thermometer2 ;  
  Thermometer[3]= &Thermometer3 ;  
  Thermometer[4]= &Thermometer4 ;
  Thermometer[5]= &Thermometer5 ; 
  // start serial port
  Serial.begin(9600);
  // Start up the library
  sensors.begin();
  // set the resolution to 10 bit (good enough?)
    for (int i= 0; i < sensor_count; i++) {
      sensors.setResolution(*Thermometer[i], 10);
    }
  //sensors.setResolution(dogHouseThermometer, 10);
  lcd.init();
  lcd.backlight();
  
  //-------( Initialize Pins so relays are inactive at reset)----
  digitalWrite(Relay_1, RELAY_OFF);
  digitalWrite(Relay_2, RELAY_OFF);
  digitalWrite(Relay_3, RELAY_OFF);
  digitalWrite(Relay_4, RELAY_OFF);  
  
//---( THEN set pins as outputs )----  
  pinMode(Relay_1, OUTPUT);   
  pinMode(Relay_2, OUTPUT);  
  pinMode(Relay_3, OUTPUT);  
  pinMode(Relay_4, OUTPUT);    
  delay(4000); //Check that all relays are inactive at Reset

}

void printTemperature(DeviceAddress deviceAddress,int num)
{
  float tempC = sensors.getTempC(deviceAddress), tempF;
  if (tempC == -127.00) {
    lcd.print("Error   ");
    Serial.print("Error getting temperature");
  } else {
    lcd.setCursor(10, num + 1);
    lcd.print("F: ");
    tempF = DallasTemperature::toFahrenheit(tempC);
    lcd.print(tempF);    
    if (num == 0) 
      {if (tempF > 70.0)digitalWrite(Relay_1, RELAY_ON);
       else digitalWrite(Relay_1, RELAY_OFF);
       }
    Serial.print("C: ");
    Serial.print(tempC);
    Serial.print(" F: ");
    Serial.print(DallasTemperature::toFahrenheit(tempC));
  }
}

void loop(void)
{ 
  delay(2000);
  Serial.print("Getting temperatures...\n\r");
  sensors.requestTemperatures();
  
  for (int i= 0; i < sensor_count; i++)
    {
      // print title
      if (!(i % sensor_location1)) {
        lcd.setCursor(0, 0);
        s1 = String(sensor_name[i]);
        lcd.print(s1.substring(0,8)+" Temps");
      }
      lcd.setCursor(0, (i% sensor_location1)+1);      
      s1 = String(sensor_name[i]);
      lcd.print(s1.substring(9));
      Serial.print(sensor_name[i]);
      printTemperature(*Thermometer[i],i% sensor_location1);
      Serial.print("\n\r");
      // delay to read LCD for this location
      if ((i % sensor_location1)== (sensor_location1 - 1)) 
        delay(5000);
    }
  
  //Serial.print(sensor_name[0]);
  //printTemperature(insideThermometer,0);
  //Serial.print("\n\r");
  //Serial.print(sensor_name[1]);
  //printTemperature(outsideThermometer,1);
  //Serial.print("\n\r");
  //Serial.print("Dog House temperature is: ");
  //printTemperature(dogHouseThermometer);
  //Serial.print("\n\r\n\r");
}
